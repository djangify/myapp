# Generated by Django 4.2.18 on 2025-03-30 10:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('short_description', tinymce.models.HTMLField(max_length=200)),
                ('project_timeline', models.CharField(blank=True, help_text="When the project was built, e.g., 'Jan-Mar 2023'", max_length=100)),
                ('introduction', tinymce.models.HTMLField(blank=True, help_text='Introduction section describing the project overview', null=True)),
                ('business_logic', tinymce.models.HTMLField(blank=True, help_text='The problem statement and business logic of the project', null=True)),
                ('target_audience', tinymce.models.HTMLField(blank=True, help_text='Description of who the project is designed for', null=True)),
                ('tech_stack_description', tinymce.models.HTMLField(blank=True, help_text='Detailed description of the technical stack and architecture', null=True)),
                ('architecture_description', tinymce.models.HTMLField(blank=True, help_text='Explanation of architecture and design patterns used', null=True)),
                ('feature_description', tinymce.models.HTMLField(blank=True, help_text='Description of key features and functionality', null=True)),
                ('development_process', tinymce.models.HTMLField(blank=True, help_text='Approach and methodologies used during development', null=True)),
                ('challenges', tinymce.models.HTMLField(blank=True, help_text='Technical hurdles faced and how they were overcome', null=True)),
                ('bugs_and_fixes', tinymce.models.HTMLField(blank=True, help_text='Significant issues encountered and their resolutions', null=True)),
                ('outcome', tinymce.models.HTMLField(blank=True, help_text='How the project meets its objectives', null=True)),
                ('lessons_learned', tinymce.models.HTMLField(blank=True, help_text='Technical and project management insights gained', null=True)),
                ('future_improvements', tinymce.models.HTMLField(blank=True, help_text='Planned or potential future enhancements', null=True)),
                ('conclusion', tinymce.models.HTMLField(blank=True, help_text='Summary of the project experience', null=True)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='portfolio/featured/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('featured_image_url', models.URLField(blank=True, null=True)),
                ('demo_video_url', models.URLField(blank=True, help_text='URL to a demo video (e.g., YouTube)', null=True)),
                ('github_url', models.URLField(blank=True, help_text='URL to the GitHub repository for this project', null=True)),
                ('external_url', models.URLField(blank=True, help_text='URL to the external marketplace listing', null=True)),
                ('live_site_url', models.URLField(blank=True, help_text='URL to the live deployed project', null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=60)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('meta_keywords', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Portfolios',
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('category', models.CharField(choices=[('frontend', 'Frontend'), ('backend', 'Backend'), ('database', 'Database'), ('devops', 'DevOps'), ('mobile', 'Mobile'), ('other', 'Other')], default='other', help_text='Category of the technology', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Technologies',
                'ordering': ['name', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='portfolio/gallery/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('image_url', models.URLField(blank=True, null=True)),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='portfolio.portfolio')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='portfolio',
            name='technologies',
            field=models.ManyToManyField(related_name='portfolios', to='portfolio.technology'),
        ),
    ]
